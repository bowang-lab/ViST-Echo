# -*- coding: utf-8 -*-
"""dice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D7kBap_mnrrqLf0D68WmQjoA0l52XFp8
"""

from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
img = load_img("/content/Screen Shot 2023-10-19 at 8.19.39 PM.png")
data = img_to_array(img)
print(data)

import numpy

unique, counts = numpy.unique(data, return_counts=True)

dict(zip(unique, counts))
#{0: 7, 1: 4, 2: 1, 3: 2, 4: 1}

from PIL import Image
image = Image.open('/content/Screen Shot 2023-10-19 at 8.19.39 PM.png')
from numpy import asarray
data = asarray('/content/Screen Shot 2023-10-19 at 8.19.39 PM.png')
print(data)

import cv2
import numpy as np

#load images
y_pred = cv2.imread('/content/Screen Shot 2023-10-19 at 8.19.39 PM.png')
y_true = cv2.imread('/content/Screen Shot 2023-10-19 at 8.19.25 PM.png')

# Dice similarity function
def dice(pred, true):
    intersection = np.sum(pred) * 2.0
    dice = intersection / (np.sum(pred) + np.sum(true))
    return dice

dice_score = dice(y_pred, y_true) #255 in my case, can be 1
print ("Dice Similarity: {}".format(dice_score))

#load images
y_pred = cv2.imread('/content/Screen Shot 2023-10-19 at 8.19.39 PM.png')
y_true = cv2.imread('/content/Screen Shot 2023-10-19 at 8.19.25 PM.png')

# Dice similarity function
def dice(pred, true):
    intersection = np.sum(pred) * 2.0
    dice = intersection / (np.sum(pred) + np.sum(true))
    return dice

dice_score = dice(y_pred, y_true) #255 in my case, can be 1
print ("Dice Similarity: {}".format(dice_score))

import numpy as np

def dice_coefficient(y_true, y_pred):
    intersection = np.sum(y_true * y_pred)
    return (2. * intersection) / (np.sum(y_true) + np.sum(y_pred))

dicey_score = dice_coefficient(y_true, y_pred) #255 in my case, can be 1
print ("Dice Similarity: {}".format(dicey_score))

from skimage.metrics import jaccard_score

def dice_coefficient(y_true, y_pred):
    jaccard = jaccard_score(y_true.flatten(), y_pred.flatten())
    return 2*jaccard / (1 + jaccard)

import matplotlib.pyplot as plt
import numpy as np

nemo = cv2.imread('/content/pred.png')
plt.imshow(nemo)
plt.show()

nemo = cv2.cvtColor(nemo, cv2.COLOR_BGR2RGB)
plt.imshow(nemo)
plt.show()

hsv_nemo = cv2.cvtColor(nemo, cv2.COLOR_RGB2HSV)

plt.imshow(hsv_nemo)
plt.show()

dark_green = (28, 106, 90)
light_green = (22, 154, 127)

mask = cv2.inRange(nemo, light_green, dark_green)
plt.imshow(mask)
plt.show()

result = cv2.bitwise_and(nemo, nemo, mask=mask)

plt.subplot(1, 2, 1)
plt.imshow(mask, cmap="gray")
plt.subplot(1, 2, 2)
plt.imshow(result)
plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt
import imutils
img = cv2.imread("/content/pred.png",0)
img1 = imutils.resize(img)
img2 = img1[197:373,181:300]  #roi of the image

indices = np.where(img2!= [0])
coordinates = zip(indices[0], indices[1])

import cv2
import numpy as np

# read image
img = cv2.imread('/content/pred.png')

# convert to grayscale
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

plt.imshow(gray)
plt.show()

# threshold and invert so hexagon is white on black background
thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)[1]
thresh = 255 - thresh

# get contours
result = np.zeros_like(img)
contours = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
contours = contours[0] if len(contours) == 2 else contours[1]
cntr = contours[0]
cv2.drawContours(result, [cntr], 0, (255,255,255), 1)

plt.imshow(thresh)
plt.show()

import cv2
import numpy as np

# read image
img = cv2.imread('/content/actual.png')

# convert to grayscale
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

# threshold and invert so hexagon is white on black background
thresh1 = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)[1]
thresh1 = 255 - thresh1

# get contours
result1 = np.zeros_like(img)
contours = cv2.findContours(thresh1, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
contours = contours[0] if len(contours) == 2 else contours[1]
cntr = contours[0]
cv2.drawContours(result1, [cntr], 0, (255,255,255), 1)

plt.imshow(thresh1)
plt.show()

#load images
y_pred = thresh1
#cv2.imread('/content/Screen Shot 2023-10-19 at 8.19.39 PM.png')
y_true = thresh
#cv2.imread('/content/Screen Shot 2023-10-19 at 8.19.25 PM.png')

# Dice similarity function
def dice(pred, true):
    intersection = np.sum(pred) * 2.0
    dice = intersection / (np.sum(pred) + np.sum(true))
    return dice

dice_score = dice(y_pred, y_true) #255 in my case, can be 1
print ("Dice Similarity: {}".format(dice_score))

plt.imshow(result)
plt.show()

# save resulting images
cv2.imwrite('blue_hexagon_thresh.png',thresh)
cv2.imwrite('blue_hexagon_contour.png',result)

# show thresh and contour
cv2.imshow("thresh", thresh)
cv2.imshow("result", result)

# print number of points along contour
print('number of points: ',len(cntr))

print('')

# list contour points
for pt in cntr:
    print(pt)

# save resulting images
cv2.imwrite('blue_hexagon_thresh.png',thresh)
cv2.imwrite('blue_hexagon_contour.png',result)

# show thresh and contour
cv2.imshow("thresh", thresh)
cv2.imshow("result", result)
cv2.waitKey(0)
cv2.destroyAllWindows()

import numpy as np
import matplotlib.pyplot as plt
data = [[0.588, 0.591, 0.587, 0.589, 0.590, 0.587, 0.587, 0.588, 0.588, 0.588],
[7.633, 7.560, 7.640, 7.622, 7.608, 7.640, 7.635, 7.625, 7.627, 7.623],
[5.706, 5.696, 5.713, 5.718, 5.702, 5.724, 5.700, 5.695, 5.717, 5.701]]
X = np.arange(10)
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(X + 0.00, data[0], color = 'blue', width = 0.25)
ax.bar(X + 0.25, data[1], color = 'darkblue', width = 0.25)
ax.bar(X + 0.50, data[2], color = 'lightblue', width = 0.25)
ax.legend(labels=['R^2', 'RMSE', 'MAE'])

import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
langs = ['.', '..', '...', '....', '.....', '......', '.......', '........', '.........', '..........']
r2 = [0.588, 0.591, 0.587, 0.589, 0.590, 0.587, 0.587, 0.588, 0.588, 0.588]
#students = [23,17,35,29,12]
ax.bar(langs, r2)
ax.set_title('Evaluation of UltraSwin_small: R^2')
plt.show()

import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
langs = ['.', '..', '...', '....', '.....', '......', '.......', '........', '.........', '..........']

rmse = [7.633, 7.560, 7.640, 7.622, 7.608, 7.640, 7.635, 7.625, 7.627, 7.623]
ax.bar(langs, rmse, color='darkblue')
ax.set_title('Evaluation of UltraSwin_small: RMSE')


plt.show()

import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
langs = ['.', '..', '...', '....', '.....', '......', '.......', '........', '.........', '..........']

mse = [5.706, 5.696, 5.713, 5.718, 5.702, 5.724, 5.700, 5.695, 5.717, 5.701]
ax.bar(langs, mse, color='lightblue')
ax.set_title('Evaluation of UltraSwin_small: MSE')


plt.show()

import numpy as np
import matplotlib.pyplot as plt
data = [[0.594, 0.594, 0.595, 0.595, 0.596, 0.593, 0.596, 0.592, 0.591, 0.594],
[7.575, 7.577, 7.562, 7.566, 7.559, 7.582, 7.558, 7.590, 7.600, 7.571],
[5.578, 5.586, 5.576, 5.568, 5.588, 5.610, 5.554, 5.603, 5.591, 5.581]]
X = np.arange(10)
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(X + 0.00, data[0], color = 'purple', width = 0.25)
ax.bar(X + 0.25, data[1], color = 'blue', width = 0.25)
ax.bar(X + 0.50, data[2], color = 'green', width = 0.25)
ax.legend(labels=['R^2', 'RMSE', 'MAE'])

import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
langs = ['.', '..', '...', '....', '.....', '......', '.......', '........', '.........', '..........']
r2 = [0.594, 0.594, 0.595, 0.595, 0.596, 0.593, 0.596, 0.592, 0.591, 0.594]
#students = [23,17,35,29,12]
ax.bar(langs, r2)
ax.set_title('Evaluation of UltraSwin_base: R^2')
plt.show()

import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
langs = ['.', '..', '...', '....', '.....', '......', '.......', '........', '.........', '..........']

rmse = [7.575, 7.577, 7.562, 7.566, 7.559, 7.582, 7.558, 7.590, 7.600, 7.571]
ax.bar(langs, rmse, color='darkblue')
ax.set_title('Evaluation of UltraSwin_base: RMSE')


plt.show()

import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
langs = ['.', '..', '...', '....', '.....', '......', '.......', '........', '.........', '..........']

mse = [5.578, 5.586, 5.576, 5.568, 5.588, 5.610, 5.554, 5.603, 5.591, 5.581]
ax.bar(langs, mse, color='lightblue')
ax.set_title('Evaluation of UltraSwin_base: MSE')


plt.show()